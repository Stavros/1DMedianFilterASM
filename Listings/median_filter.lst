


ARM Macro Assembler    Page 1 


    1 00000000         ; Engineer: Stavros Kalapothas
    2 00000000         ; Date: 13/04/2020
    3 00000000         ; Project: Calculate 1D Median Filter with a custom wind
                       ow size
    4 00000000         ;
    5 00000000         ;        1 2 3 4 5 6 7 8 9 10
    6 00000000         ;     x x 1 2 3 -> bsort -> 3 2 1 2 3 -> 1
    7 00000000         ;        x 1 2 3 4 -> bsort -> 2 1 2 3 4 -> 2
    8 00000000         ;     1 2 3 4 5 -> bsort -> 1 2 3 4 5 -> 3
    9 00000000         ;                 ...
   10 00000000         ;     6 7 8 9 10 -> bsort -> 6 7 8 9 10 -> 8
   11 00000000         ;             7 8 9 10 x -> bsort -> 7 8 9 10 9 -> 9
   12 00000000         ;     8 9 10 x x -> bsort -> 8 9 10 9 8 -> 10
   13 00000000         
   14 00000000                 TTL              median_filter
   15 00000000                 AREA             program, CODE, READONLY
   16 00000000                 EXPORT           main
   17 00000000 00000005 
                       wdw     EQU              5           ; window size
   18 00000000 0000000A 
                       siz     EQU              10          ; array size
   19 00000000         
   20 00000000                 ENTRY
   21 00000000         
   22 00000000         main                                 ; init
   23 00000000 F8DF 8114       LDR              R8, =src    ; load the starting
                                                             address of the src
                                                             list
   24 00000004 4F45            LDR              R7, =tempd  ; load the starting
                                                             address of the tem
                                                            pd list
   25 00000006 4846            LDR              R0, =temp   ; load the starting
                                                             address of the tem
                                                            p list
   26 00000008 F8DF B118       LDR              R11, =dest  ; load the starting
                                                             address od the des
                                                            t list
   27 0000000C F04F 0900       MOV              R9, #0      ; init counter
   28 00000010         
   29 00000010         loop                                 ; loop
   30 00000010 F1B9 0F0A       CMP              R9, #siz    ; reached the end o
                                                            f array?
   31 00000014 F140 807E       BPL.w            stop        ; if yes goto stop 
                                                              
   32 00000018         ; main iteration
   33 00000018 F109 0901       ADD              R9, R9, #1  ; increment counter
                                                            
   34 0000001C F1B9 0F01       CMP              R9, #1      ; is counter index=
                                                            1 ?
   35 00000020 D015            BEQ              edge_start1 ; edge case N=1
   36 00000022 F1B9 0F02       CMP              R9, #2      ; is counter index=
                                                            2 ?
   37 00000026 D023            BEQ              edge_start2 ; edge case N=2
   38 00000028 F1B9 0F09       CMP              R9, #siz-1  ; is counter N-1 ?
   39 0000002C D02F            BEQ              edge_end1   ; edge case
   40 0000002E F1B9 0F0A       CMP              R9, #siz    ; is counter N ?
   41 00000032 D03B            BEQ              edge_end2   ; edge case  
   42 00000034 E8B8 007C       LDM              R8!, {R2-R6} ; load 5 elements
   43 00000038         ;STM R0, {R2-R6}   ; store 5 elements



ARM Macro Assembler    Page 2 median_filter


   44 00000038 F840 2B04       STR              R2, [R0], #4 ; store i+1 item t
                                                            o temp list
   45 0000003C F840 3B04       STR              R3, [R0], #4 ; store i+1 item t
                                                            o temp list
   46 00000040 F840 4B04       STR              R4, [R0], #4 ; store i+1 item t
                                                            o temp list
   47 00000044 F840 5B04       STR              R5, [R0], #4 ; store i+1 item t
                                                            o temp list 
   48 00000048 F840 6B04       STR              R6, [R0], #4 ; store i+1 item t
                                                            o temp list
   49 0000004C E03F            B                bsort       ; go execute bsort 
                                                            and return median
   50 0000004E         
   51 0000004E         edge_start1                          ; edge case
   52 0000004E F8D8 A008       LDR              R10, [R8, #8] 
                                                            ; load i+2 src item
                                                            
   53 00000052 F840 AB04       STR              R10, [R0], #4 ; store i+2 item 
                                                            to temp list
   54 00000056 F8D8 A004       LDR              R10, [R8, #4] 
                                                            ; load i+1 src item
                                                            
   55 0000005A F840 AB04       STR              R10, [R0], #4 ; store i+1 item 
                                                            to temp list
   56 0000005E E8B8 001C       LDM              R8!, {R2-R4} ; load 3 words fro
                                                            m src list
   57 00000062         ;STM R0, {R2-R4}   ; store 3 words to temp list
   58 00000062 F840 2B04       STR              R2, [R0], #4 ; store i+1 item t
                                                            o temp list
   59 00000066 F840 3B04       STR              R3, [R0], #4 ; store i+1 item t
                                                            o temp list
   60 0000006A F840 4B04       STR              R4, [R0], #4 ; store i+1 item t
                                                            o temp list
   61 0000006E E02E            B                bsort       ; go calculate bsor
                                                            t and return median
                                                            
   62 00000070         
   63 00000070         edge_start2                          ; edge case
   64 00000070 F8D8 A004       LDR              R10, [R8, #4] 
                                                            ; load i+1 src item
                                                            
   65 00000074 F840 AB04       STR              R10, [R0], #4 ; store i+1 item 
                                                            to temp list
   66 00000078 E8B8 003C       LDM              R8!, {R2-R5} ; load 3 words fro
                                                            m src list
   67 0000007C         ;STM R0, {R2-R5}   ; store 3 words to temp list
   68 0000007C F840 2B04       STR              R2, [R0], #4 ; store i+1 item t
                                                            o temp list
   69 00000080 F840 3B04       STR              R3, [R0], #4 ; store i+1 item t
                                                            o temp list
   70 00000084 F840 4B04       STR              R4, [R0], #4 ; store i+1 item t
                                                            o temp list
   71 00000088 F840 5B04       STR              R5, [R0], #4 ; store i+1 item t
                                                            o temp list
   72 0000008C E01F            B                bsort       ; go execute bsort 
                                                            and return median  
                                                             
   73 0000008E         
   74 0000008E         edge_end1                            ; edge case



ARM Macro Assembler    Page 3 median_filter


   75 0000008E F8D8 A004       LDR              R10, [R8, #4] 
                                                            ; load i+1 src item
                                                            
   76 00000092 F840 AB04       STR              R10, [R0], #4 ; store i+1 item 
                                                            to temp list
   77 00000096 E8B8 003C       LDM              R8!, {R2-R5} ; load 3 words fro
                                                            m src list
   78 0000009A         ;STM R0, {R2-R5}   ; store 3 words to temp list
   79 0000009A F840 2B04       STR              R2, [R0], #4 ; store i+1 item t
                                                            o temp list
   80 0000009E F840 3B04       STR              R3, [R0], #4 ; store i+1 item t
                                                            o temp list
   81 000000A2 F840 4B04       STR              R4, [R0], #4 ; store i+1 item t
                                                            o temp list
   82 000000A6 F840 5B04       STR              R5, [R0], #4 ; store i+1 item t
                                                            o temp list   
   83 000000AA E010            B                bsort       ; go execute bsort 
                                                            and return median 
   84 000000AC         
   85 000000AC         
   86 000000AC         edge_end2                            ; edge case
   87 000000AC F8D8 A008       LDR              R10, [R8, #8] 
                                                            ; load i+2 src item
                                                            
   88 000000B0 F840 AB04       STR              R10, [R0], #4 ; store i+2 item 
                                                            to temp list
   89 000000B4 F8D8 A004       LDR              R10, [R8, #4] 
                                                            ; load i+1 src item
                                                            
   90 000000B8 F840 AB04       STR              R10, [R0], #4 ; store i+1 item 
                                                            to temp list
   91 000000BC E8B8 001C       LDM              R8!, {R2-R4} ; load 3 words fro
                                                            m src list
   92 000000C0         ;STM R0, {R2-R4}   ; store 3 words to temp list
   93 000000C0 F840 2B04       STR              R2, [R0], #4 ; store i+1 item t
                                                            o temp list
   94 000000C4 F840 3B04       STR              R3, [R0], #4 ; store i+1 item t
                                                            o temp list
   95 000000C8 F840 4B04       STR              R4, [R0], #4 ; store i+1 item t
                                                            o temp list
   96 000000CC E7FF            B                bsort       ; go calculate bsor
                                                            t and return median
                                                            
   97 000000CE         
   98 000000CE         bsort
   99 000000CE         ; Bubble sort an array of 32bit integers in place
  100 000000CE         ; Arguments: R0 = Array location, R1 = Array size
  101 000000CE 4814            LDR              R0, =temp
  102 000000D0 F04F 0105       MOV              R1, #wdw    ; load window size
  103 000000D4         ;MOV  R3, #0    ; init help var
  104 000000D4         ;MOV  R4, #0    ; init help var
  105 000000D4         ;MOV  R5, #0    ; init help var
  106 000000D4 B57F            PUSH             {R0-R6, LR} ; Push registers on
                                                             to the stack
  107 000000D6         
  108 000000D6         bsort_next                           ; Check for a sorte
                                                            d array
  109 000000D6 F04F 0200       MOV              R2,#0       ; R2 = Current Elem
                                                            ent Number



ARM Macro Assembler    Page 4 median_filter


  110 000000DA F04F 0600       MOV              R6,#0       ; R6 = Number of sw
                                                            aps
  111 000000DE         
  112 000000DE         bsort_loop                           ; Start loop
  113 000000DE F102 0301       ADD              R3,R2,#1    ; R3 = Next Element
                                                             Number
  114 000000E2 428B            CMP              R3,R1       ; Check for the end
                                                             of the array
  115 000000E4 DA0C            BGE              bsort_check ; When we reach the
                                                             end, check for cha
                                                            nges
  116 000000E6 F850 4022       LDR              R4,[R0,R2,LSL #2] ; R4 = Curren
                                                            t Element Value
  117 000000EA F850 5023       LDR              R5,[R0,R3,LSL #2] ; R5 = Next E
                                                            lement Value
  118 000000EE 42AC            CMP              R4,R5       ; Compare element v
                                                            alues
  119 000000F0 BFC2 F840 
              5022             STRGT            R5,[R0,R2,LSL #2] ; If R4 > R5,
                                                             store current valu
                                                            e at next
  120 000000F6 F840 4023       STRGT            R4,[R0,R3,LSL #2] ; If R4 > R5,
                                                             Store next value a
                                                            t current
  121 000000FA 1C76            ADDGT            R6,R6,#1    ; If R4 > R5, Incre
                                                            ment swap counter
  122 000000FC 461A            MOV              R2,R3       ; Advance to the ne
                                                            xt element
  123 000000FE E7EE            B                bsort_loop  ; End loop
  124 00000100         
  125 00000100         bsort_check                          ; Check for changes
                                                            
  126 00000100 2E00            CMP              R6,#0       ; Were there change
                                                            s this iteration?
  127 00000102 BFC8 1E49       SUBGT            R1,R1,#1    ; Optimization: ski
                                                            p last value in nex
                                                            t loop
  128 00000106 DCE6            BGT              bsort_next  ; If there were cha
                                                            nges, do it again
  129 00000108         
  130 00000108         bsort_done                           ; Return
  131 00000108 BD7F            POP              {R0-R6, PC} ; Pop the registers
                                                             off of the stack
  132 0000010A F847 0B08       STR              R0, [R7], #8 ; Store the 3rd va
                                                            lue on temp array
  133 0000010E F84B 7B04       STR              R7, [R11], #4 ; Store the media
                                                            n value to dest arr
                                                            ay
  134 00000112 E77D            B                loop        ; return to main lo
                                                            op
  135 00000114         
  136 00000114         stop                                 ; exit()
  137 00000114 DF0B            SWI              #11
  138 00000116         
  139 00000116 00 00 00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             data, DATA, READWRITE



ARM Macro Assembler    Page 5 median_filter


  140 00000000 00000003 
              00000001 
              00000009 
              00000004 
              00000007 
              00000002 
              00000008 
              00000010 
              00000006 
              00000005 src     DCD              0x03, 0x01, 0x09, 0x04, 0x07, 0
x02, 0x08, 0x10, 0x06, 0x05
  141 00000028 00000000 
                       temp    DCD              0x00
  142 0000002C 00000000 
                       tempd   DCD              0x00
  143 00000030 00000000 
                       dest    DCD              0x00
  144 00000034                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\median_filter.d -o.\objects\median_filter.o -I.\RTE\_Tar
get_1 -IC:\Users\Stavros\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Inc
lude -IC:\Users\Stavros\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\Device\ARM\ARMC
M3\Include --predefine="__UVISION_VERSION SETA 529" --predefine="_RTE_ SETA 1" 
--predefine="ARMCM3 SETA 1" --list=.\listings\median_filter.lst median_filter.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

bsort 000000CE

Symbol: bsort
   Definitions
      At line 98 in file median_filter.s
   Uses
      At line 49 in file median_filter.s
      At line 61 in file median_filter.s
      At line 72 in file median_filter.s
      At line 83 in file median_filter.s
      At line 96 in file median_filter.s

bsort_check 00000100

Symbol: bsort_check
   Definitions
      At line 125 in file median_filter.s
   Uses
      At line 115 in file median_filter.s
Comment: bsort_check used once
bsort_done 00000108

Symbol: bsort_done
   Definitions
      At line 130 in file median_filter.s
   Uses
      None
Comment: bsort_done unused
bsort_loop 000000DE

Symbol: bsort_loop
   Definitions
      At line 112 in file median_filter.s
   Uses
      At line 123 in file median_filter.s
Comment: bsort_loop used once
bsort_next 000000D6

Symbol: bsort_next
   Definitions
      At line 108 in file median_filter.s
   Uses
      At line 128 in file median_filter.s
Comment: bsort_next used once
edge_end1 0000008E

Symbol: edge_end1
   Definitions
      At line 74 in file median_filter.s
   Uses
      At line 39 in file median_filter.s
Comment: edge_end1 used once
edge_end2 000000AC

Symbol: edge_end2
   Definitions
      At line 86 in file median_filter.s
   Uses
      At line 41 in file median_filter.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: edge_end2 used once
edge_start1 0000004E

Symbol: edge_start1
   Definitions
      At line 51 in file median_filter.s
   Uses
      At line 35 in file median_filter.s
Comment: edge_start1 used once
edge_start2 00000070

Symbol: edge_start2
   Definitions
      At line 63 in file median_filter.s
   Uses
      At line 37 in file median_filter.s
Comment: edge_start2 used once
loop 00000010

Symbol: loop
   Definitions
      At line 29 in file median_filter.s
   Uses
      At line 134 in file median_filter.s
Comment: loop used once
main 00000000

Symbol: main
   Definitions
      At line 22 in file median_filter.s
   Uses
      At line 16 in file median_filter.s
Comment: main used once
program 00000000

Symbol: program
   Definitions
      At line 15 in file median_filter.s
   Uses
      None
Comment: program unused
stop 00000114

Symbol: stop
   Definitions
      At line 136 in file median_filter.s
   Uses
      At line 31 in file median_filter.s
Comment: stop used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

data 00000000

Symbol: data
   Definitions
      At line 139 in file median_filter.s
   Uses
      None
Comment: data unused
dest 00000030

Symbol: dest
   Definitions
      At line 143 in file median_filter.s
   Uses
      At line 26 in file median_filter.s
Comment: dest used once
src 00000000

Symbol: src
   Definitions
      At line 140 in file median_filter.s
   Uses
      At line 23 in file median_filter.s
Comment: src used once
temp 00000028

Symbol: temp
   Definitions
      At line 141 in file median_filter.s
   Uses
      At line 25 in file median_filter.s
      At line 101 in file median_filter.s

tempd 0000002C

Symbol: tempd
   Definitions
      At line 142 in file median_filter.s
   Uses
      At line 24 in file median_filter.s
Comment: tempd used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

siz 0000000A

Symbol: siz
   Definitions
      At line 18 in file median_filter.s
   Uses
      At line 30 in file median_filter.s
      At line 38 in file median_filter.s
      At line 40 in file median_filter.s

wdw 00000005

Symbol: wdw
   Definitions
      At line 17 in file median_filter.s
   Uses
      At line 102 in file median_filter.s
Comment: wdw used once
2 symbols
355 symbols in table
