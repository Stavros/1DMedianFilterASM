


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             example,CODE,READONLY
    2 00000000         
    3 00000000                 ENTRY
    4 00000000         
    5 00000000 F8DF D054       LDR              SP,=dest    ; 
    6 00000004 4C15            LDR              R4,=src     ; this is the begin
                                                            ning
    7 00000006         
    8 00000006         ; R5,[R4]; Take the number from the stack; 
    9 00000006 6866            LDR              r6,[r4,#4]  ;
   10 00000008 6065            STR              r5,[r4,#4]  ; Put the number in
                                                            side the register i
                                                            nto the stack;
   11 0000000A 6026            STR              R6,[R4]     ;
   12 0000000C 6825            LDR              R5,[R4]     ;
   13 0000000E 6866            LDR              r6,[r4,#4]  ; R0,R2 innitail
   14 00000010 4602            MOV              r2,r0
   15 00000012         
   16 00000012         loop_1
   17 00000012 4281            CMP              r1,r0       ; R1 is 0,r0 is n
   18 00000014 DA17            BGE              loop_end    ; if R1 is larger t
                                                            han R0, end
   19 00000016 F101 0101       ADD              r1,r1,#1    ; r1++
   20 0000001A F1A2 0201       SUB              r2,r2,#1    ; R2 is required to
                                                             compare the number
                                                             of
   21 0000001E F04F 0300       MOV              r3,#0       ; R3 is the subscri
                                                            pt for the next loo
                                                            p, initializing the
                                                            
   22 00000022 4C0E            LDR              R4,=src     ; stack at the begi
                                                            nning
   23 00000024 E7FF            B                loop_2
   24 00000026         
   25 00000026         loop_2
   26 00000026 4293            CMP              r3,r2       ; if R3 is larger t
                                                            han R2
   27 00000028 DAF3            BGE              loop_1      ; end
   28 0000002A F103 0301       ADD              r3,r3,#1
   29 0000002E 6825            LDR              R5,[R4]     ; Take the current 
                                                            two numbers out of 
                                                            the LDR r6,[r4,#4]
   30 00000030 F104 0404       ADD              r4,r4,#4
   31 00000034 42B5            CMP              r5,r6       ; If the left side 
                                                            is larger than the 
                                                            large
   32 00000036 D9F6            BLS              loop_2
   33 00000038 F1A4 0404       SUB              r4,r4,#4
   34 0000003C 6065            STR              r5,[r4,#4]  ; Exchange
   35 0000003E 6026            STR              R6,[R4]
   36 00000040 F104 0404       ADD              r4,r4,#4
   37 00000044 E7EF            B                loop_2
   38 00000046         
   39 00000046         loop_end
   40 00000046 EA4F 0250       MOV              r2,r0,lsr#1 ; /2
   41 0000004A F04F 0304       MOV              r3,#4
   42 0000004E FB02 F103       MUL              r1,r2,r3    ; offset 
   43 00000052 F85D 1001       LDR              R1,[SP,R1]  ; take the median 
   44 00000056         



ARM Macro Assembler    Page 2 


   45 00000056 00 00 00000000 
              00000000 
              00000000         AREA             data, DATA
   46 00000000 0000000A 
              00000014 
              00000014 
              0000000A 
              00000014 src     DCD              0x0000000A, 0x00000014, 0x00000
014, 0x0000000A, 0x00000014
   47 00000014 0000000A 
              00000014 
              00000014 
              0000000A 
              00000014 dest    DCD              0x0000000A, 0x00000014, 0x00000
014, 0x0000000A, 0x00000014
   48 00000028                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\median_code2.d -o.\objects\median_code2.o -I.\RTE\_Targe
t_1 -IC:\Users\Stavros\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Inclu
de -IC:\Users\Stavros\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\Device\ARM\ARMCM3
\Include --predefine="__UVISION_VERSION SETA 529" --predefine="_RTE_ SETA 1" --
predefine="ARMCM3 SETA 1" --list=.\listings\median_code2.lst median_code2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

example 00000000

Symbol: example
   Definitions
      At line 1 in file median_code2.s
   Uses
      None
Comment: example unused
loop_1 00000012

Symbol: loop_1
   Definitions
      At line 16 in file median_code2.s
   Uses
      At line 27 in file median_code2.s
Comment: loop_1 used once
loop_2 00000026

Symbol: loop_2
   Definitions
      At line 25 in file median_code2.s
   Uses
      At line 23 in file median_code2.s
      At line 32 in file median_code2.s
      At line 37 in file median_code2.s

loop_end 00000046

Symbol: loop_end
   Definitions
      At line 39 in file median_code2.s
   Uses
      At line 18 in file median_code2.s
Comment: loop_end used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

data 00000000

Symbol: data
   Definitions
      At line 45 in file median_code2.s
   Uses
      None
Comment: data unused
dest 00000014

Symbol: dest
   Definitions
      At line 47 in file median_code2.s
   Uses
      At line 5 in file median_code2.s
Comment: dest used once
src 00000000

Symbol: src
   Definitions
      At line 46 in file median_code2.s
   Uses
      At line 6 in file median_code2.s
      At line 22 in file median_code2.s

3 symbols
342 symbols in table
